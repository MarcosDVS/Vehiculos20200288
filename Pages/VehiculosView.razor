@page "/Car"
@using Vehiculo20200288.Data.Models
@using Vehiculo20200288.Data.Services
@using Vehiculo20200288.Data

<PageTitle>Listar Vehiculos</PageTitle>

<h1>Listar Vehiculos</h1>
<hr>

<label for="">Marca</label>
<input @bind="SelecCar.Marca" type="text" name="" id="">

<label for="">Modelo</label>
<input @bind="SelecCar.Modelo" type="text" name="" id="">

<label for="">Año</label>
<input @bind="SelecCar.Año" type="datatime" name="" id="">
<br>
<br>
<label for="">Color</label>
<input @bind="SelecCar.Color" type="text" name="" id="">

<button @onclick="Guardar" class="btn btn-success" ><span class="oi oi-plus"></span>
</button>
<button @onclick="clean" class="btn btn-warning">Refresh</button>

<table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Marca</th>
                <th>Modelo</th>
                <th>Año</th>
                <th>Color</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Vehiculo in vehiculos)
            {
                <tr>
                    <td>@Vehiculo.VehiculoID</td>
                    <td>@Vehiculo.Marca</td>
                    <td>@Vehiculo.Modelo</td>
                    <td>@Vehiculo.Año</td>
                    <td>@Vehiculo.Color</td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-warning" @onclick="()=>Editar(Vehiculo.VehiculoID)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            
                            <button class="btn btn-danger" @onclick="()=>Eliminar(Vehiculo.VehiculoID)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </div>
                    </td>    
                </tr>
            }
        </tbody>
    </table>

@code
{
    public Vehiculo SelecCar {get; set;} = new Vehiculo();
    
    public List<Vehiculo>? vehiculos {get; set;} 
    = new List<Vehiculo>()
    {
        new Vehiculo()
        {
            VehiculoID=1,
            Marca="Toyota",
            Modelo="Corolla",
            Año=2022,
            Color="Blanco",
        },
    };
    async Task Cargar()
    {
        var r = await VehiculoService.Consultar();
        if(r.Succeeded) vehiculos = r.Data;
    }
     protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    
    void Editar(int Id)
    {
        SelecCar = vehiculos!.FirstOrDefault(p => p.VehiculoID == Id) ?? new Vehiculo();
    }
    async Task Eliminar(int Id)
    {
        await VehiculoService.Eliminar(Id);
        await Cargar();
    }

    async Task Guardar()
    {
        if(
        !string.IsNullOrEmpty(SelecCar!.Marca) &&
        !string.IsNullOrEmpty(SelecCar!.Modelo) &&
        !string.IsNullOrEmpty(SelecCar!.Color)
        )
        {
           if(SelecCar.VehiculoID==0)
           {
            await VehiculoService.Crear(
            SelecCar!.Marca,
            SelecCar!.Modelo,
            SelecCar!.Año,
            SelecCar!.Color
            );
            return;
           }
            //Codigo para editar
           
            await Cargar();
        }
    }
    void clean()
    {
        SelecCar.Marca= string.Empty;
        SelecCar.Modelo=string.Empty;
        SelecCar.Año.ToString("0");
        SelecCar.Modelo=string.Empty;
    }
}